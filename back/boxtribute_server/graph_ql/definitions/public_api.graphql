type Query {
  beneficiaryDemographics(baseIds: [Int!]): BeneficiaryDemographicsData
  createdBoxes(baseId: Int): CreatedBoxesData
  topProductsCheckedOut(baseId: Int!): TopProductsData
  topProductsDonated(baseId: Int!): TopProductsData
}

interface DataCube {
  facts: [Result]
  dimensions: Dimensions
}

union Result = BeneficiaryDemographicsResult | CreatedBoxesResult | TopProductsResult
union Dimensions = BeneficiaryDemographicsDimensions | CreatedBoxDataDimensions | TopProductsDimensions

type BeneficiaryDemographicsData implements DataCube {
  facts: [BeneficiaryDemographicsResult]
  dimensions: BeneficiaryDemographicsDimensions
}

type BeneficiaryDemographicsDimensions {
  tag: [ResultIdName]
}

type BeneficiaryDemographicsResult {
  age: Int
  gender: HumanGender
  createdOn: Date
  tagIds: [Int!]
  count: Int
}

type CreatedBoxesData implements DataCube {
  facts: [CreatedBoxesResult]
  dimensions: CreatedBoxDataDimensions
}

type CreatedBoxesResult {
  createdOn: Date
  categoryId: Int
  productId: Int
  gender: ProductGender
  boxesCount: Int
  itemsCount: Int
}

type CreatedBoxDataDimensions {
  product: [ResultIdName]
  category: [ResultIdName]
}

type TopProductsData implements DataCube {
  facts: [TopProductsResult]
  dimensions: TopProductsDimensions
}

type TopProductsResult {
  createdOn: Date
  " The date items of that product were either checked out, or donated "
  distributedOn: Date
  sizeId: Int
  productId: Int
  categoryId: Int
  rank: Int
  itemsCount: Int
}

type TopProductsDimensions {
  size: [ResultIdName]
  product: [ResultIdName]
  category: [ResultIdName]
}

type ResultIdName {
  id: ID
  name: String
}
