type Query {
  bases: [Base!]!
  base(id: ID!): Base
  organisation(id: ID!): Organisation
  organisations: [Organisation!]!
  user(id: ID): User
  users: [User!]!
  box(labelIdentifier: String!): Box
  qrCode(qrCode: String!): QrCode
  qrExists(qrCode: String): Boolean
  location(id: ID!): Location
  locations: [Location!]!
  product(id: ID!): Product
  products(paginationInput: PaginationInput): ProductPage!
  productCategory(id: ID!): ProductCategory
  productCategories: [ProductCategory!]!
  beneficiary(id: ID!): Beneficiary
  beneficiaries(paginationInput: PaginationInput): BeneficiaryPage!
  transferAgreement(id: ID!): TransferAgreement
  """
  Without any arguments, return transfer agreements that involve client's organisation,
  regardless of agreement state. Optionally filter for agreements of certain state(s).
  """
  transferAgreements(states: [TransferAgreementState!]): [TransferAgreement!]!
  shipment(id: ID!): Shipment
  shipments: [Shipment!]!
}

type Mutation {
  createQrCode(boxLabelIdentifier: String): QrCode
  createBox(boxCreationInput: CreateBoxInput): Box
  updateBox(boxUpdateInput: UpdateBoxInput): Box
  createBeneficiary(beneficiaryCreationInput: CreateBeneficiaryInput): Beneficiary
  updateBeneficiary(beneficiaryUpdateInput: UpdateBeneficiaryInput): Beneficiary

  createTransferAgreement(creationInput: TransferAgreementCreationInput): TransferAgreement
  acceptTransferAgreement(id: ID!): TransferAgreement
  rejectTransferAgreement(id: ID!): TransferAgreement
  cancelTransferAgreement(id: ID!): TransferAgreement

  createShipment(creationInput: ShipmentCreationInput): Shipment
  updateShipment(updateInput: ShipmentUpdateInput): Shipment
  cancelShipment(id: ID!): Shipment
  sendShipment(id: ID!): Shipment

  updateShipmentDetail(updateInput: ShipmentDetailUpdateInput): ShipmentDetail
}
