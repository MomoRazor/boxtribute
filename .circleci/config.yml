version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@1.8.4
jobs:
  build:
    parameters:
      serviceName:
        type: string
      envVariablePrefix:
        type: string
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/project
    steps:
      - checkout
      # create virtual environment for python in the folder
      - run: python3 -m venv env
      - run: source env/bin/activate
      # install python requirements
      - run: pip install . -r requirements.txt
      # install gcloud orb
      - gcp-cli/install
      # record version
      - run: |
          echo "CircleCI build number:${CIRCLE_BUILD_NUM}
            Branch: ${CIRCLE_BRANCH}
            Git hash: ${CIRCLE_SHA1}" > version.txt
      # generate .env file
      - run: |
          echo "
          AUTH0_DOMAIN=${<< parameters.envVariablePrefix >>AUTH0_DOMAIN}
          AUTH0_AUDIENCE=${<< parameters.envVariablePrefix >>AUTH0_AUDIENCE}
          MYSQL_USER=${<< parameters.envVariablePrefix >>DBNAME}
          MYSQL_PASSWORD=${<< parameters.envVariablePrefix >>DBPASS}
          MYSQL_DB=${<< parameters.envVariablePrefix >>DBNAME}
          CLOUD_SQL_CONNECTION_NAME=${GCLOUD_SQL_SOCKET}" > .env
      # generate google app engine config for target environment
      - run: |
          sed 's/service: api-staging/service: << parameters.serviceName >>/g' app.yaml > app-<< parameters.serviceName >>.yaml
      # get google credentials
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      # deploy to GCloud
      - run: |
          gcloud app deploy app-<< parameters.serviceName >>.yaml
workflows:
  build-and-deploy:
    jobs:
    # deploy to staging
    - build:
        name: deploy-staging
        context: GCLOUD
        envVariablePrefix: STAGING_
        serviceName: api-staging
        filters:
          branches:
            only: feature/add-circleci
    # # deploy to demo
    # - build:
    #   name: deploy-demo
    #   context: GCLOUD
    #   envVariablePrefix: DEMO_
    #   serviceName: api-demo
    #   filters:
    #     branches:
    #       only: production
    # # deploy to production
    # - build:
    #   name: deploy-prod
    #   context: GCLOUD
    #   envVariablePrefix: PRODUCTION_
    #   serviceName: api-production
    #   filters:
    #     branches:
    #       only: production
    # browser test on staging
    # - test:
    #   yarn: true
    #   record: true
    #   wait-on: 'https://staging.boxwise.co/'
    #   no-workspace: true
    #   requires:
    #     - deploy-staging
    #   filters:
    #     branches:
    #       only: master
    #   post-steps:
    #     - store_test_results:
    #         path: cypress/results
